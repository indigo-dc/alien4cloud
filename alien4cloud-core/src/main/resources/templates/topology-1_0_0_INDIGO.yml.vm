## Will look in the context for: 
## - template_name
## - template_version
## - template_author
## - application_description
## - topology
## --------------------------------------------
## -- Serialize an AbstractPropertyValue 
#macro(serializeAbtractPropertyValue $v $tab)
#if($utils.isScalarPropertyValue($v))
## TODO: manage integer, boolean ... by looking into property definition
$utils.renderScalar($v.value)
#elseif($utils.isFunctionPropertyValue($v) || $utils.isConcatPropertyValue($v))
{ $utils.renderFunctionAndConcat($v) }
#elseif($utils.isListPropertyValue($v))
[ $utils.getCsvToString($v.value, true) ]
#elseif($utils.isComplexPropertyValue($v))

#serializeAbtractPropertyValues( $v.value, "$tab  ")
#end
#end## macro serializeAbtractPropertyValue
## --------------------------------------------
## -- Serialize an AbstractPropertyValue map
#macro(serializeAbtractPropertyValues $map $tab)
#foreach($mapEntry in $map.entrySet())
#if($utils.isAbstractPropertyValueNotNullAndPrintable($mapEntry.value))
$tab${mapEntry.key}: #serializeAbtractPropertyValue(${mapEntry.value}, $tab)
#end## if
#end## of mapEntry iteration  
#end## macro serializeAbtractPropertyValues
## ---------------------------------------------
## BEGINING OF DOCUMENT
tosca_definitions_version: ${tosca_definitions_version}
#if($description)
description: $utils.renderDescription($description, "  ")
#end## if
#if($template_name)
template_name: ${template_name}
#end## if
#if($template_version)
template_version: ${template_version}
#end## if
#if($template_author)
template_author: ${template_author}
#end## if
#if($utils.mapIsNotEmptyAndContainsNotnullValues($repositories))

repositories:
#foreach($repositoryEntry in ${repositories.entrySet()})
  ${repositoryEntry.key}:
    url: ${repositoryEntry.value.url}
#if($repositoryEntry.value.description)
    description: $utils.renderDescription($repositoryEntry.value.description, "      ")
#end## if
#end
#end## if
#if($utils.importsAreNotEmpty($topology.dependencies))

imports:
#foreach($dependency in ${topology.dependencies})
#if(!$dependency.toscaDefinitionDependency)
  - ${dependency.name}:
      file: ${dependency.file}
#if($dependency.repository)
      repository: ${dependency.repository}
#end## if repository
#end## if not toscaDefinitionDependency
#end## foreach dependency
#end## if importsAreNotEmpty

topology_template:
#if($application_description)
  description: ${utils.renderDescription(${application_description}, "    ")}
#end## if application_description defined

#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.inputs))
  inputs:
#foreach($inputEntry in $topology.inputs.entrySet())   
    ${inputEntry.key}:
      type: ${inputEntry.value.type}
      required: $inputEntry.value.required
#if($inputEntry.value.default)      
      default: $utils.renderScalar($inputEntry.value.default)
#end## if default defined
#if($utils.collectionIsNotEmpty($inputEntry.value.constraints))
      constraints: 
#foreach($constraint in $inputEntry.value.constraints)
        - ${utils.renderConstraint($constraint)}
#end## constraint iteration
#end## if constraints not empty
#if($inputEntry.value.description)
      description: ${utils.renderDescription($inputEntry.value.description, "        ")}
#end## if description defined 
#end## foreach($inputEntry in $topology.inputs.entrySet())    
#end## if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.inputs)) 
#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.inputArtifacts))
  input_artifacts:
#foreach($inputArtifactEntry in $topology.inputArtifacts.entrySet())
    ${inputArtifactEntry.key}:
      type: ${inputArtifactEntry.value.artifactType}
#if($inputArtifactEntry.value.description)
      description: ${utils.renderDescription($inputArtifactEntry.value.description, "        ")}
#end##if($inputArtifactEntry.value.description)
#end##foreach($inputArtifactEntry in $topology.inputArtifacts.entrySet()) 
#end##if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.inputArtifacts))
#if($topology.substitutionMapping)
  substitution_mappings:
    node_type: ${topology.substitutionMapping.substitutionType.elementId}
#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.substitutionMapping.capabilities))
    capabilities:
#foreach($substitutionCapabilityEntry in $topology.substitutionMapping.capabilities.entrySet())
      ${substitutionCapabilityEntry.key}: [ ${substitutionCapabilityEntry.value.nodeTemplateName}, ${substitutionCapabilityEntry.value.targetId} ]
#end##foreach($substitutionCapabilityEntry in $topology.substitutionMapping.capabilities.entrySet())
#end##if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.substitutionMapping.capabilities))
#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.substitutionMapping.requirements))
    requirements:
#foreach($substitutionRequirementEntry in $topology.substitutionMapping.requirements.entrySet())
      ${substitutionRequirementEntry.key}: [ ${substitutionRequirementEntry.value.nodeTemplateName}, ${substitutionRequirementEntry.value.targetId} ]
#end##foreach($substitutionRequirementEntry in $topology.substitutionMapping.requirements.entrySet())
#end##if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.substitutionMapping.requirements))
#end##if($topology.substitutionMapping)


  node_templates:
#foreach($nodeTemplateEntry in ${topology.nodeTemplates.entrySet()})

    ${nodeTemplateEntry.key}:
      type: ${nodeTemplateEntry.value.type}
#if($utils.mapIsNotEmptyAndContainsNotnullValues($nodeTemplateEntry.value.properties))      
      properties:
#serializeAbtractPropertyValues($nodeTemplateEntry.value.properties "        ")      
#end## if
#if($utils.mapIsNotEmptyAndContainsNotnullValues($nodeTemplateEntry.value.relationships)) 
      requirements:
#foreach($relationship in ${nodeTemplateEntry.value.relationships.values()})
#if($utils.mapIsNotEmptyAndContainsNotnullValues($relationship.properties) || $utils.hasInterfacesNotNullContainingPrintableOperations($relationship.interfaces))
        - ${relationship.requirementName}:
            node: ${relationship.target}
#if($relationship.requirementType)
            capability: ${relationship.requirementType}
#end##
            relationship:
#if($relationship.type)
              type: ${relationship.type}
#end##  
#if($utils.mapIsNotEmptyAndContainsNotnullValues($relationship.properties))
              properties:
#serializeAbtractPropertyValues($relationship.properties "                ")
#end## if properties
#if($utils.hasInterfacesNotNullContainingPrintableOperations($relationship.interfaces))
              interfaces:
$utils.serializeInterfaces($relationship.interfaces, "                ")
#end## if interfaces
#else
        - ${relationship.requirementName}: ${relationship.target}
#end##
#end## of relationship iteration    
#end## if
#if($utils.hasCapabilitiesContainingNotNullProperties($nodeTemplateEntry.value))
      capabilities:
#foreach($capabilityEntry in ${nodeTemplateEntry.value.capabilities.entrySet()})
#if($utils.mapIsNotEmptyAndContainsNotnullValues($capabilityEntry.value.properties))
        ${capabilityEntry.key}:
          properties:
#serializeAbtractPropertyValues($capabilityEntry.value.properties "            ")
#end## if capability properties not empty
#end## of capabilityEntry iteration
#end## if hasCapabilitiesContainingNotNullProperties
#if($utils.hasArtifactsContainingNotNullValues($nodeTemplateEntry.value))
      artifacts:
#foreach($artifactEntry in ${nodeTemplateEntry.value.artifacts.entrySet()})
        ${artifactEntry.key}:
          type: ${artifactEntry.value.artifactType}
          file: #serializeAbtractPropertyValue($artifactEntry.value.file "            ")
#end## of artifactEntry iteration
#end## if hasArtifactsContainingNotNullProperties
#if($utils.hasInterfacesNotNullContainingPrintableOperations($nodeTemplateEntry.value.interfaces))
      interfaces:
$utils.serializeInterfaces($nodeTemplateEntry.value.interfaces, "        ")
#end## if interfaces
#end## of nodeTemplateEntry iteration
#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.groups))
  groups:
#foreach($groupEntry in ${topology.groups.entrySet()})
    ${groupEntry.key}:
      members: [ $utils.getCsvToString($groupEntry.value.members) ]
#if($utils.collectionIsNotEmpty($groupEntry.value.policies))
      policies:
#foreach($policy in ${groupEntry.value.policies})
        - name: ${policy.name}
          type: ${policy.type}
#end## of policy iteration      
#end## if $groupEntry.value.policies not empty      
#end## of groupEntry iteration  
#end## if $topology.groups not empty
#if($utils.collectionIsNotEmpty($topology.policies))
  policies:
#foreach($policy in ${topology.policies})
    - ${policy.name}:
        type: ${policy.type}
#if($utils.mapIsNotEmptyAndContainsNotnullValues($policy.properties))
        properties:
#serializeAbtractPropertyValues($policy.properties "          ")
#end## if properties non empty
        targets: [ $utils.getCsvToString($policy.targets) ]
#end## foreach policy
#end## if policies not empty
#if($utils.mapIsNotEmptyAndContainsNotnullValues($topology.outputs))
  outputs:
#foreach($outputEntry in ${topology.outputs.entrySet()})
    ${outputEntry.key}:
      value: #serializeAbtractPropertyValue(${outputEntry.value.value})
#if($outputEntry.value.description)
      description: $utils.renderDescription($outputEntry.value.description, "        ")
#end## if
#end
#end## if
#if($utils.mapIsNotEmpty($topology.workflows))
  workflows:
#foreach($wfEntry in ${topology.workflows.entrySet()})
    ${wfEntry.key}:
#if(${wfEntry.value.description})
      description: ${utils.renderDescription(${wfEntry.value.description}, "        ")}
#end## if wfEntry.value.description
#if($utils.mapIsNotEmpty(${wfEntry.value.steps}))
      steps:
#foreach($taskEntry in ${wfEntry.value.steps.entrySet()})
        ${taskEntry.key}:
#if($taskEntry.value.nodeId)
          node: ${taskEntry.value.nodeId}
#if($taskEntry.value.activity)
          activity:
#if($utils.canRenderInlineActivityArgs(${taskEntry.value.activity}))
            ${utils.getActivityLabel(${taskEntry.value.activity})}: ${utils.getInlineActivityArg(${taskEntry.value.activity})}
#else
            ${utils.getActivityLabel(${taskEntry.value.activity})}: 
#foreach($argEntry in ${utils.getActivityArgsMap(${taskEntry.value.activity})})
              ${argEntry.key}: ${argEntry.value}
#end## foreach getActivityArgsMap
#end## if canRenderInlineActivityArgs
#end## if taskEntry.value.activity
#end## if taskEntry.value.nodeId
#if($utils.collectionIsNotEmpty(${taskEntry.value.followingSteps}))
          on-success:
#foreach($following in ${taskEntry.value.followingSteps})
            - ${following}
#end## foreach taskEntry.value.followingSteps
#end## if taskEntry.value.followingSteps not empty
#end## foreach wfEntry.value.steps
#end## if map wfEntry.value.steps not empty
#end## foreach topology.workflows.entrySet
#end## if map topology.workflows not empty
